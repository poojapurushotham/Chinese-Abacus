package bina;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

/*
 * Class that simulates a Roman Abacus 
 */
public class RomanAbacus implements Abacus {
	
	//constructor
	public RomanAbacus() {
		fillMap();
	}
	
	private void fillMap() {
		map.put('I', UNIT_BOT);
		map.put('V', UNIT_TOP);
		map.put('X', TENS_BOT);
		map.put('L', TENS_TOP);
		map.put('C', HUND_BOT);
		map.put('D', HUND_TOP);
		map.put('M', THOU_BOT);
	}
	
	/*
	 * Inserts the Roman Numeral String into the Abacus
	 * 
	 */
	@Override
	public boolean insert(String str) {
		if (str==null || str.length()==0) {
			return false;
		}
		
		//iterate through string
		for (int i=str.length()-1; i>=0; i--) {
			int value=map.get(str.charAt(i)), index=1;
			
			//iterate through linkedHashMap
			List<Character> keyList = new ArrayList<>(map.keySet());
			for (int j=0;j<keyList.size();j++) {
				int carry=0;
				char current = keyList.get(j), next='\u0000';
				
				if (current == str.charAt(i)) {
					
					if (i-1>=0) {
						next = str.charAt(i-1);
					}
					
					if (index % 2 == 1) { //odd - BOTTOM COLUMNS (I,X,C,M)
						switch (current) {
						
							case 'I' : 
								value+=1;
								break;
								
							case 'X' :
								if (next == 'I') { //IX
									map.put('I', map.get('I')+3);
									map.put('V', map.get('V')+1);
								} else {
									value+=1;
								}
								break;
								
							case 'C' :
								if(next == 'X') { //XC
									map.put('L', map.get('L')+1);
									map.put('X', map.get('X')+3);
								} else {
									value+=1;
								}
								break;	
								
							case 'M' :
								if(next == 'C') { //CM
									map.put('D', map.get('D')+1);
									map.put('C', map.get('C')+3);
								} else {
									value+=1;
								}
								break;
						}//switch
						
						if (value > 4 && current!='M') { //overflow
							carry=value/5;
							value=value%5;
						}
						
					} else { //even - TOP COLUMNS (V,L,D)
						switch (current) {
							case 'V' :
								if(next == 'I') { //IV
									map.put('I', map.get('I')+3); //add 3 instead of 4 since we again scan the next char
								} else {
									value+=1;
								}
								break;
							case 'L' :
								if(next == 'X') { //XL
									map.put('X', map.get('X')+3);
								} else {
									value+=1;
								}
								break;
							case 'D' :
								if(next == 'C') { //CD
									map.put('C', map.get('C')+3);
								} else {
									value+=1;
								}
								break;	
							}//switch
						
						if (value > 2) {
							carry=value%2;
							value=value/2;
						}
					}//else
					map.put(current, value);
					if (carry>0) {
						if (j+1<keyList.size()) {
							next = keyList.get(j+1);
						} else {
							next = current;
						}
						map.put(next, map.get(next)+carry);
					}
				}//if
				index++;
				
			}//while
			//printMap();
		}//for
		return true;
	}

	/*
	 * Gets the Roman Numeral String from the Abacus
	 * 
	 */
	@Override
	public String retrieve() {
		StringBuilder sb = new StringBuilder();
		List<Character> keyList = new ArrayList<>(map.keySet());
		for (int j=0; j<keyList.size(); j++) {
			char literal = keyList.get(j);
			int value = map.get(literal);
			
			//Don't check for values that are 0 in the map
			if (map.get(literal) == 0) {
				continue;
			}
						
			switch (literal) {	
			
				case 'I' : 
				case 'X' :
				case 'C' :
						value = adjustMap(j);
						if (value == 4) {
							if (map.get(keyList.get(j+1)) >= 1) {
								if (literal == 'I') {
									sb.append("XI"); //appending reverse strings
								} else if (literal == 'X') {
									sb.append("CX");
								} else if (literal == 'C') {
									sb.append("MC");
								}
								map.put(keyList.get(j+1), map.get(keyList.get(j+1))-1);
							} else {
								if (literal == 'I') {
									sb.append("VI");
								} else if (literal == 'X') {
									sb.append("LX");
								} else if (literal == 'C') {
									sb.append("DC");
								}
							}
						} else {
							while (value-- > 0) {
								sb.append(literal);
							}
						}
						break;
						
				case 'V':
				case 'L':
				case 'D':
					if (value > 1) { //overflow
						value = adjustMap(j);
					}
					if (value == 1) {
						sb.append(literal);
					}
					break;	
					
				case 'M' :	
						while (value-- > 0) {
							sb.append(literal);
						}
						break;
				}//switch
			}//while
		return sb.reverse().toString();
	}
	
	//Prints the map(abacus contents) to test
	private void printMap() {
		Iterator<Character> iter = map.keySet().iterator();
		while (iter.hasNext()) {
			Character literal = iter.next();
			System.out.println(literal + " -> " + map.get(literal));
		}	
	}
	
	/*
	 * Handles overflow of the Roman Numeral String when they are inserted into the Abacus
	 * 
	 */
	public int adjustMap(int j) {
		List<Character> keyList = new ArrayList<>(map.keySet());
		int value = map.get(keyList.get(j));
		int carry=0;
		char literal = keyList.get(j);

		switch (literal) {
			case 'V' :  
			case 'L' :
			case 'D' :
					carry=value/2;
					value=value%2;
					map.put(keyList.get(j+1), map.get(keyList.get(j+1))+carry);
					map.put(literal, value);
					break;
					
			case 'I' : 	
			case 'X' :  
			case 'C' :	
				if (value > 4) { //overflow
					carry=value/5;
					value=value%5;
					map.put(keyList.get(j+1), map.get(keyList.get(j+1))+carry);
					map.put(literal, value);
				}
				break;
		}
		return map.get(literal);
	}
}
